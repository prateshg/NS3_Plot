import pylab as pl
import math
import numpy as np
import sys
import os
from matplotlib import pyplot as plt
import subprocess
import matplotlib.ticker as mticker
from matplotlib.ticker import ScalarFormatter

#Google 65+INCAST

plt.figure(figsize=(4,3))
plt.ylabel("FCT Slow Down", fontsize=17)
plt.xlabel("Flow Size (KB)", fontsize=17)
plt.xscale('log')
plt.yscale('log')
plt.gca().set_ylim(bottom=1)

Flow_Size = [1,2,4,8,16,64,256,1024,4096]
SlowDown = [2.4932398256944985, 2.5729761904761905, 2.5640330188679243, 2.7704545454545455, 3.1331473214285714, 4.3489754098360658, 6.8466880341880341, 8.8657790492957744, 8.545862118595279]
plt.plot(Flow_Size, SlowDown, '-', color='blue', label='BFC')

SlowDown = [72.027397393882651, 69.122976190476194, 68.608018867924528, 66.427893518518516, 63.961184210526319, 56.078457446808514, 64.073117154811712, 108.44189189189188, 81.822014622258322]
plt.plot(Flow_Size, SlowDown,  '-.', color='green', label='HPCC')

SlowDown = [126.55198519515477, 122.16833333333334, 121.82676886792453, 119.1658256880734, 113.58056722689075, 101.65195312500001, 82.68113738738738, 104.44777508090615, 105.07501813346228]
plt.plot(Flow_Size, SlowDown, '--', color='red', label='DCQCN')

SlowDown = [1.9361007091068441, 1.9520238095238096, 2.0615654205607479, 2.2531818181818184, 2.8421218487394957, 4.5064212328767121, 7.5865441176470592, 10.567486462093862, 12.205816445830086]
plt.plot(Flow_Size, SlowDown, ':', color='black', label='IdealFQ')

#SlowDown = [8.1422532265774379, 8.2588095238095232, 8.1824074074074069, 8.0761261261261268, 8.7123893805309738, 11.132753164556963, 84.920606060606062, 97.087581168831164, 75.512964684014875]
#plt.plot(Flow_Size, SlowDown, '-.', color='brown', label='HPCC+SFQ')

SlowDown = [93.177521423212099, 89.373809523809527, 88.060280373831773, 87.055795454545461, 82.129310344827587, 72.228614457831327, 65.358786610878667, 93.463412162162157, 42.02912754303599]
plt.plot(Flow_Size, SlowDown, '--', color='orange', label='DCTCP')
ax = plt.axes()
ax.get_yaxis().set_ticks([1,2,4,8,16,32,64,128,256], minor=True)
ax.get_yaxis().set_ticks([], minor=False)
ax.yaxis.set_minor_formatter(mticker.ScalarFormatter())
ax.yaxis.get_minor_formatter().set_scientific(False)
ax.yaxis.set_major_formatter(mticker.ScalarFormatter())
ax.yaxis.get_major_formatter().set_scientific(False)
for tick in ax.yaxis.get_major_ticks():
	tick.label.set_fontsize(14)
for tick in ax.yaxis.get_minor_ticks():
	tick.label.set_fontsize(14)
for tick in ax.xaxis.get_major_ticks():
	tick.label.set_fontsize(14)
plt.legend(bbox_to_anchor=(-0.1, 1.02, 1.1, 1.02), loc=3, ncol=2, mode="expand", borderaxespad=0., prop={'size': 15}, frameon=False)
plt.tight_layout()

plt.figure(figsize=(4,3))
plt.ylabel("CDF", fontsize=17)
plt.xlabel("Buffer Occupancy (MB)", fontsize=17)
plt.ylim([0.0,1.03])
plt.xlim([0,12])

CDF = [0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.19,0.2,0.21,0.22,0.23,0.24,0.25,0.26,0.27,0.28,0.29,0.3,0.31,0.32,0.33,0.34,0.35,0.36,0.37,0.38,0.39,0.4,0.41,0.42,0.43,0.44,0.45,0.46,0.47,0.48,0.49,0.5,0.51,0.52,0.53,0.54,0.55,0.56,0.57,0.58,0.59,0.6,0.61,0.62,0.63,0.64,0.65,0.66,0.67,0.68,0.69,0.7,0.71,0.72,0.73,0.74,0.75,0.76,0.77,0.78,0.79,0.8,0.81,0.82,0.83,0.84,0.85,0.86,0.87,0.88,0.89,0.9,0.91,0.92,0.93,0.94,0.95,0.96,0.97,0.98,0.99, 1.0]
Buffer_Size = [11220,21326,28751,35968,41433,46298,51127,55879,60088,63993,68161,72012,75808,79784,83454,86825,90284,93840,97129,100774,104286,107977,111432,115123,118664,122400,125933,129613,133185,137026,140882,144583,148364,152513,156956,161178,165730,170589,175491,180903,186788,192780,200168,207262,216225,226374,238805,253532,273180,308605,381122,461911,514820,554031,586827,611812,633495,653799,671413,688123,703600,718367,733298,746390,759375,772140,784229,795735,807255,818764,831040,842500,853541,864255,875154,886116,896969,908242,919901,931232,943161,954254,965694,977640,989842,1002353,1016145,1030323,1045500,1061720,1078543,1096418,1117326,1139195,1165484,1192863,1231132,1277313,1348848,1841025]
Buffer_Size = np.array(Buffer_Size)
plt.plot(Buffer_Size/1e6, CDF, '-', color='blue', label='BFC')

Buffer_Size = [8720,16232,22901,29056,34940,40691,46208,51665,57093,62515,67868,73261,78468,83821,89022,94376,99740,105132,110876,116603,122423,128594,134677,141282,148300,155457,163031,170908,179418,188481,198157,208606,220014,232249,245955,261224,278833,299519,323196,351977,387027,428990,474644,525985,580798,634302,685364,740079,793411,843537,894062,943390,990811,1037291,1083088,1130840,1178700,1227406,1274804,1322177,1370357,1414372,1458421,1505856,1553709,1600095,1644815,1690813,1739108,1790453,1847580,1909840,1973901,2040459,2108868,2182022,2260562,2346903,2439969,2544298,2646961,2765282,2891466,3021643,3161644,3322431,3488275,3687272,3898597,4099947,4314727,4531112,4809573,5122604,5393182,5590178,5733911,5854983,5958590,6721697]
Buffer_Size = np.array(Buffer_Size)
plt.plot(Buffer_Size/1e6, CDF, '-.', color='green', label='HPCC')

Buffer_Size = [2040,6700,13113,20209,28405,37436,46321,55606,65688,75579,86080,96654,107845,119413,131112,143792,156695,171280,186819,203356,220562,240281,261539,286947,311505,341707,377389,417712,472771,546314,667310,870241,1085210,1251270,1400551,1538068,1673765,1795707,1914139,2021564,2125584,2212556,2309604,2414690,2512791,2613417,2709161,2804514,2906564,2998064,3093759,3184544,3281556,3377501,3476720,3576502,3674141,3772343,3861340,3946693,4022558,4108338,4189823,4271362,4354990,4429858,4511980,4591654,4680864,4764456,4847453,4922818,4995849,5061080,5127664,5189692,5250674,5324521,5387024,5446025,5498111,5539008,5577040,5608287,5633111,5665416,5718337,5817681,5950975,6141572,6342062,6539769,6741425,6946297,7112014,7268944,7420471,7573770,7734787,8364395]
Buffer_Size = np.array(Buffer_Size)
plt.plot(Buffer_Size/1e6, CDF, '--', color='red', label='DCQCN')

Buffer_Size = [2433,10341,19380,29830,40926,53040,64969,76500,88740,101104,111978,124562,136066,148559,160965,173400,186660,200107,213971,227311,241143,256055,272462,288956,305517,322470,339869,357234,375648,394868,414945,437633,460321,485702,512417,539960,570476,604290,638321,672180,710145,747299,787567,831425,873249,916561,959218,1006486,1055093,1103008,1154099,1204946,1256954,1310917,1368604,1430171,1485929,1546320,1615971,1684072,1754027,1833722,1919573,2017958,2122451,2234340,2361948,2507230,2665505,2842351,3057960,3321794,3658684,4101824,4578780,5111220,5581003,6105212,6524179,6900300,7278107,7668675,8006201,8328131,8625433,8868948,9059793,9284466,9608455,10497640,11908627,12888831,14147161,15362761,16581658,17940649,20716989,24106068,28233310,38460246]
Buffer_Size = np.array(Buffer_Size)
plt.plot(Buffer_Size/1e6, CDF, ':', color='black', label='IdealFQ')

#Buffer_Size=[5450,11092,16504,21608,26160,30709,35266,39560,43958,48332,52573,56886,61155,65400,69610,73834,78058,82269,86471,90767,95272,99748,104352,108968,113668,118579,123562,128857,134641,140230,146074,152246,158931,165827,173053,180835,188894,197536,206581,216656,227080,238163,249900,262224,275769,290136,305777,321719,338322,355774,373855,392326,411104,429621,449066,468933,488866,508841,529536,550224,570466,590415,611108,632782,654172,676651,699564,722876,747187,771598,797977,826142,853711,884236,916449,952216,988394,1027147,1069953,1117511,1170254,1231283,1301851,1390660,1489053,1611053,1763254,1952154,2209112,2564839,3092997,3691028,4288638,4852562,5239413,5492098,5655569,5768801,5865724,6574642]
#Buffer_Size = np.array(Buffer_Size)
#plt.plot(Buffer_Size/1e6, CDF, '-.', color='brown', label='HPCC+SFQ')

Buffer_Size=[20329,40606,58558,75881,92655,108827,125381,142173,159368,177082,195331,214482,234893,258174,283964,311630,344208,380352,420588,465803,515618,572147,629889,688643,749307,806620,865078,921711,978182,1032672,1087230,1143211,1199607,1254218,1313518,1375461,1434250,1493790,1548914,1604637,1660346,1720310,1775811,1831773,1886400,1942074,1998014,2053002,2106685,2160313,2213391,2269578,2329911,2390898,2455350,2523385,2591464,2661694,2732609,2807119,2886630,2968730,3049526,3128418,3208913,3293613,3379935,3474726,3568651,3663157,3761915,3861622,3964067,4079446,4200085,4307202,4424674,4543084,4663413,4772996,4884630,4998954,5112913,5208838,5292275,5375311,5458626,5542147,5617124,5686743,5750051,5814473,5876095,5943015,6018731,6099046,6192420,6328149,6643620,8586865]
Buffer_Size = np.array(Buffer_Size)
plt.plot(Buffer_Size/1e6, CDF, '--', color='orange', label='DCTCP')

ax = plt.axes()
for tick in ax.xaxis.get_major_ticks():
	tick.label.set_fontsize(14)
for tick in ax.yaxis.get_major_ticks():
	tick.label.set_fontsize(14)
plt.legend(bbox_to_anchor=(-0.1, 1.02, 1.1, 1.02), loc=3, ncol=2, mode="expand", borderaxespad=0., prop={'size': 15}, frameon=False)
plt.tight_layout()

fig, ax = plt.subplots(figsize=(4,3))
labels = ['BFC', 'HPCC', 'DCQCN', 'DCTCP']#, 'HPCC+SFQ',]
spine_Tor= [0, 6.5, 9.98, 12.44]#, 4.5]
ToR_spine = [0, 0.0, 0.33, 0.0]#, 0.0]

x = np.arange(len(labels))  # the label locations
width = 0.2  # the width of the bars

rects2 = ax.bar(x - width/2, spine_Tor, width, label='Core->ToR', hatch='\\\\')
rects1 = ax.bar(x + width/2, ToR_spine, width, label='ToR->Core', hatch='//')


# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('% of time paused', fontsize=19 )
#ax.set_title('Scores by group and gender')
for tick in ax.xaxis.get_major_ticks():
	tick.label.set_fontsize(14)
for tick in ax.yaxis.get_major_ticks():
	tick.label.set_fontsize(14)
ax.set_xticks(x)
ax.set_xticklabels(labels, rotation='vertical')
ax.legend(bbox_to_anchor=(-0.15, 0.97, 1.23, 0.97), loc=3, ncol=2, mode="expand", borderaxespad=0., prop={'size': 15}, frameon=False)

fig.tight_layout()


fig, ax = plt.subplots(figsize=(4,3))
labels = ['BFC', 'HPCC', 'DCQCN', 'IdealFQ', 'DCTCP']#,'HPCC+SFQ',]
spine_Tor= [122.2,117.5, 132.5, 131, 87.8]#, 109.5]
ToR_spine = [266, 212, 357, 456, 151.4]#, 183]

x = np.arange(len(labels))  # the label locations
width = 0.16  # the width of the bars

rects2 = ax.bar(x - width/2, spine_Tor, width, label='Avg', hatch='\\\\')
rects1 = ax.bar(x + width/2, ToR_spine, width, label='99', hatch='//')


# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Incast\nFCT SlowDown', fontsize=19 )
#ax.set_title('Scores by group and gender')
for tick in ax.xaxis.get_major_ticks():
	tick.label.set_fontsize(14)
for tick in ax.yaxis.get_major_ticks():
	tick.label.set_fontsize(14)
ax.set_xticks(x)
ax.set_xticklabels(labels,rotation='vertical')
ax.legend(bbox_to_anchor=(-0.15, 0.97, 1.23, 0.97), loc=3, ncol=2, mode="expand", borderaxespad=0., prop={'size': 15}, frameon=False)

fig.tight_layout()


#GOOGLE 65

plt.figure(figsize=(4,3))
plt.ylabel("FCT Slow Down", fontsize=17)
plt.xlabel("Flow Size (KB)", fontsize=17)
plt.xscale('log')
plt.yscale('log')
plt.gca().set_ylim(bottom=1)

Flow_Size = [1,2,4,8,16,64,256,1024,4096]
SlowDown = [2.066150190487412, 2.1129761904761906, 2.1896028037383179, 2.3394495412844036, 2.7230769230769232, 4.0817500000000004, 6.822115384615385, 9.1459891732283456, 9.0653165938864628]
plt.plot(Flow_Size, SlowDown, '-', color='blue', label='BFC')

SlowDown = [3.3950374936201952, 3.3667452830188678, 3.3864386792452832, 3.3836805555555554, 3.4396739130434781, 3.5637335526315788, 7.2695733532934135, 38.179823825503355, 55.93924660120846]
plt.plot(Flow_Size, SlowDown,  '-.', color='green', label='HPCC')

SlowDown = [5.5680991784268254, 5.3908333333333331, 5.3823113207547166, 5.3576388888888893, 5.2713983050847455, 5.0280075187969926, 4.7675480769230774, 6.4582838983050843, 35.664839307787389]
plt.plot(Flow_Size, SlowDown, '--', color='red', label='DCQCN')

SlowDown = [2.1416918669425433, 2.1921428571428572, 2.2431603773584907, 2.4329861111111111, 2.8973214285714284, 4.5271825396825394, 7.5118362831858407, 10.257925407925407, 10.988667243083004]
plt.plot(Flow_Size, SlowDown, ':', color='black', label='IdealFQ')

#SlowDown = [2.6244971321596431, 2.6467857142857141, 2.6856132075471697, 2.8106818181818181, 3.0769957983193277, 3.7068877551020409, 9.1218658892128275, 41.835255960729313, 59.446952073991028]
#plt.plot(Flow_Size, SlowDown, '-.', color='brown', label='HPCC+SFQ')

SlowDown = [3.95550972304066, 3.8992857142857145, 3.9047169811320757, 3.8863425925925927, 3.8943750000000001, 3.8832908163265305, 4.9159254807692312, 12.054099678456591, 16.138358695652173]
plt.plot(Flow_Size, SlowDown, '--', color='orange', label='DCTCP')

ax = plt.axes()
ax.get_yaxis().set_ticks([1,2,4,8,16,32,64], minor=True)
ax.get_yaxis().set_ticks([], minor=False)
ax.yaxis.set_minor_formatter(mticker.ScalarFormatter())
ax.yaxis.get_minor_formatter().set_scientific(False)
ax.yaxis.set_major_formatter(mticker.ScalarFormatter())
ax.yaxis.get_major_formatter().set_scientific(False)
for tick in ax.yaxis.get_major_ticks():
	tick.label.set_fontsize(14)
for tick in ax.yaxis.get_minor_ticks():
	tick.label.set_fontsize(14)
for tick in ax.xaxis.get_major_ticks():
	tick.label.set_fontsize(14)
plt.legend(bbox_to_anchor=(-0.1, 1.02, 1.1, 1.02), loc=3, ncol=2, mode="expand", borderaxespad=0., prop={'size': 15}, frameon=False)
plt.tight_layout()

plt.figure(figsize=(4,3))
plt.ylabel("CDF", fontsize=17)
plt.xlabel("Buffer Occupancy (MB)", fontsize=17)
plt.ylim([0.0,1.03])
plt.xlim([0,3])

CDF = [0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.19,0.2,0.21,0.22,0.23,0.24,0.25,0.26,0.27,0.28,0.29,0.3,0.31,0.32,0.33,0.34,0.35,0.36,0.37,0.38,0.39,0.4,0.41,0.42,0.43,0.44,0.45,0.46,0.47,0.48,0.49,0.5,0.51,0.52,0.53,0.54,0.55,0.56,0.57,0.58,0.59,0.6,0.61,0.62,0.63,0.64,0.65,0.66,0.67,0.68,0.69,0.7,0.71,0.72,0.73,0.74,0.75,0.76,0.77,0.78,0.79,0.8,0.81,0.82,0.83,0.84,0.85,0.86,0.87,0.88,0.89,0.9,0.91,0.92,0.93,0.94,0.95,0.96,0.97,0.98,0.99, 1.0]
Buffer_Size = [5455,12802,18360,23043,27049,30730,34539,37655,40663,43473,46186,48960,51233,53725,56100,58389,60796,63240,65402,67803,70133,72420,74608,76994,79200,81520,83709,86025,88223,90774,93074,95488,97920,100260,102736,105255,107825,110707,113569,116557,119627,122528,125505,128722,131880,135564,139231,142892,146859,150509,154831,159073,163811,168433,173258,178288,183315,188609,193375,198409,203354,208635,213866,219423,224657,229880,235405,240376,245262,250154,255027,259897,265050,270359,275521,280879,286159,291366,296436,302174,308132,314075,319952,326135,332421,339148,346409,353682,361025,368958,377592,387170,397617,408595,422098,436881,454755,480081,519435,727851]
Buffer_Size = np.array(Buffer_Size)
plt.plot(Buffer_Size/1e6, CDF, '-', color='blue', label='BFC')

Buffer_Size = [2621,5791,8858,11755,14558,17226,19818,22353,24828,27262,29484,31814,34006,36184,38334,40440,42510,44595,46694,48810,50921,52981,55049,57094,59091,61085,63082,65117,67092,69056,71064,73030,75053,77088,79144,81176,83216,85200,87291,89345,91390,93440,95485,97588,99745,101866,104044,106226,108353,110505,112769,115044,117360,119686,122000,124399,126814,129319,131834,134371,136992,139583,142214,144939,147816,150642,153538,156469,159575,162705,165930,169296,172656,176097,179680,183443,187427,191434,195738,199987,204516,209251,214130,219467,224976,230821,237116,243674,250579,258378,266967,276409,286915,299136,313552,330003,351094,380713,428231,900491]
Buffer_Size = np.array(Buffer_Size)
plt.plot(Buffer_Size/1e6, CDF, '-.', color='green', label='HPCC')

Buffer_Size = [1020,4080,7140,10854,14555,18396,22333,26270,30303,34290,38264,42066,45990,50152,54188,58007,62096,66078,70086,73912,77801,81694,85535,89306,93163,97056,100903,104882,109238,113292,117290,121384,125526,129378,133497,137425,141781,146056,150066,154065,158407,162805,167105,171512,175701,180333,184776,189163,193638,198265,203085,207763,212621,217576,222658,227569,232861,238098,243226,248610,253977,259353,265339,271205,276852,283184,289421,296379,302788,309934,316433,323383,330443,337610,345044,353021,361444,369415,377895,387119,396596,407090,417899,428561,440851,452250,464781,478626,493001,508176,525123,543678,564181,589637,617804,652983,699471,756228,856110,1677952]
Buffer_Size = np.array(Buffer_Size)
plt.plot(Buffer_Size/1e6, CDF, '--', color='red', label='DCQCN')

Buffer_Size = [2040,6517,12240,17464,23947,30600,36984,43463,49795,56374,63101,69366,75608,82748,89760,95880,102289,108482,114523,120483,126299,132386,138321,144182,150067,156060,162180,167926,174020,180394,186600,192662,198727,205105,210597,216614,222708,229246,235897,242177,248880,255860,262546,269525,276529,283128,290603,297240,304638,311736,319042,326030,333665,341191,348728,356373,364045,371695,379905,387914,396560,405185,413828,422019,431119,440317,449452,458885,468678,478177,488613,499411,510626,521317,533407,545649,557324,570849,585062,598990,614193,630692,647606,664385,682729,703014,724503,747012,771885,798678,828111,863803,902739,945616,999037,1068141,1150126,1274701,1496217,2843847]
Buffer_Size = np.array(Buffer_Size)
plt.plot(Buffer_Size/1e6, CDF, ':', color='black', label='IdealFQ')

#Buffer_Size=[2180,4360,6540,8720,10900,13080,15260,17440,19620,21561,23534,25526,27493,29515,31496,33297,35234,37138,39044,40810,42709,44681,46443,48242,50140,51922,53796,55626,57506,59316,61141,62982,64800,66666,68519,70342,72231,74113,75987,77840,79719,81639,83519,85468,87392,89342,91278,93223,95223,97243,99312,101386,103550,105707,107928,110124,112359,114597,116821,119174,121560,123996,126409,128948,131603,134307,137038,139818,142745,145707,148730,151816,155030,158315,161661,165140,168805,172544,176374,180313,184448,188771,193377,198316,203444,208694,214439,220604,227166,234282,242293,250674,260344,271323,284361,299577,319333,345773,388123,770619]
#Buffer_Size = np.array(Buffer_Size)
#plt.plot(Buffer_Size/1e6, CDF, '-.', color='brown', label='HPCC+SFQ')

Buffer_Size=[2253,6288,10426,14251,18209,22103,25904,29595,33149,36704,40158,43481,46779,49992,53270,56526,59650,62772,65964,69025,72094,75053,78113,80997,83852,86693,89619,92462,95317,98160,101020,103837,106699,109565,112458,115291,118165,121086,123970,126886,129761,132648,135646,138687,141694,144711,147702,150747,153821,156884,160009,163114,166305,169550,172782,176049,179381,182813,186295,189781,193253,196806,200489,204244,208109,212022,215953,219929,224136,228344,232648,237094,241797,246616,251624,256750,262220,267556,273081,278971,284929,291433,298083,305030,312477,320327,328691,337626,346847,356829,367940,380078,393417,408684,426799,448590,476051,512393,574883,1082165]
Buffer_Size = np.array(Buffer_Size)
plt.plot(Buffer_Size/1e6, CDF, '--', color='orange', label='DCTCP')

ax = plt.axes()
for tick in ax.xaxis.get_major_ticks():
	tick.label.set_fontsize(14)
for tick in ax.yaxis.get_major_ticks():
	tick.label.set_fontsize(14)
plt.legend(bbox_to_anchor=(-0.1, 1.02, 1.1, 1.02), loc=3, ncol=2, mode="expand", borderaxespad=0., prop={'size': 15}, frameon=False)
plt.tight_layout()


#FB65 + Incast

plt.figure(figsize=(4,3))
plt.ylabel("FCT Slow Down", fontsize=17)
plt.xlabel("Flow Size (KB)", fontsize=17)
plt.xscale('log')
plt.yscale('log')
plt.gca().set_ylim(bottom=1)

Flow_Size = [3,12,48,192,768,3072,12288]
SlowDown = [2.2363346747149566, 2.6521396396396395, 4.8018581081081084, 6.9927763819095476, 9.981457703927493, 10.678372681281619, 9.7158230076034915]
plt.plot(Flow_Size, SlowDown, '-', color='blue', label='BFC')

SlowDown = [65.612663670119218, 62.340771028037381, 48.514212328767123, 43.872933070866139, 54.530007530120479, 53.76351893095768, 44.550896421706341]
plt.plot(Flow_Size, SlowDown,  '-.', color='green', label='HPCC')

SlowDown = [102.05339083589405, 101.15580357142858, 73.936034482758615, 61.418912337662334, 51.953263157894739, 52.609372995509943, 48.73350513488657]
plt.plot(Flow_Size, SlowDown, '--', color='red', label='DCQCN')

SlowDown = [3.7959875215146304, 4.2971590909090907, 5.197916666666667, 7.0871000000000004, 9.9161680911680907, 10.86675, 11.178330354102826]
plt.plot(Flow_Size, SlowDown, ':', color='black', label='IdealFQ')

#SlowDown = [4.9908333333333337, 4.942708333333333, 8.7454861111111111, 54.817959770114939, 73.351117886178855, 57.3434036939314, 48.290261809547616]
#plt.plot(Flow_Size, SlowDown, '-.', color='brown', label='HPCC+SFQ')

SlowDown = [85.374285714285719, 77.400877192982449, 60.229051724137932, 56.950907821229052, 62.861604361370716, 36.228673861620344, 25.960575391964724]
plt.plot(Flow_Size, SlowDown, '--', color='orange', label='DCTCP')

ax = plt.axes()
ax.get_yaxis().set_ticks([1,2,4,8,16,32,64,128], minor=True)
ax.get_yaxis().set_ticks([], minor=False)
ax.yaxis.set_minor_formatter(mticker.ScalarFormatter())
ax.yaxis.get_minor_formatter().set_scientific(False)
ax.yaxis.set_major_formatter(mticker.ScalarFormatter())
ax.yaxis.get_major_formatter().set_scientific(False)
for tick in ax.yaxis.get_major_ticks():
	tick.label.set_fontsize(14)
for tick in ax.yaxis.get_minor_ticks():
	tick.label.set_fontsize(14)
for tick in ax.xaxis.get_major_ticks():
	tick.label.set_fontsize(14)
plt.legend(bbox_to_anchor=(-0.1, 1.02, 1.1, 1.02), loc=3, ncol=2, mode="expand", borderaxespad=0., prop={'size': 15}, frameon=False)
plt.tight_layout()

plt.figure(figsize=(4,3))
plt.ylabel("FCT Slow Down", fontsize=17)
plt.xlabel("Flow Size (KB)", fontsize=17)
plt.xscale('log')
plt.yscale('log')
plt.gca().set_ylim(bottom=1)

#FB65

Flow_Size = [3,12,48,192,768,3072,12288]
SlowDown = [2.2109669811320756, 2.4759090909090911, 4.5656690140845066, 6.8089062499999997, 9.2628685503685499, 10.150449346405228, 9.088284603004291]
plt.plot(Flow_Size, SlowDown, '-', color='blue', label='BFC')

SlowDown = [2.634918775382693, 2.6974299065420562, 3.2298013245033115, 4.0952674897119339, 16.330216881594374, 37.763711890243904, 35.777601135557134]
plt.plot(Flow_Size, SlowDown,  '-.', color='green', label='HPCC')

SlowDown = [4.5543899162320214, 4.5517523364485983, 4.2536458333333336, 4.3237664473684214, 5.1780400572246066, 16.866340152565879, 30.282063220310672]
plt.plot(Flow_Size, SlowDown, '--', color='red', label='DCQCN')

SlowDown = [4.2457805907172999, 4.6281798245614034, 5.5291030534351142, 7.3274578651685394, 9.9988357843137248, 11.03641699273337, 10.459914981617647]
plt.plot(Flow_Size, SlowDown, ':', color='black', label='IdealFQ')

#SlowDown = [2.1066972042331384, 2.3795833333333332, 3.380536912751678, 4.2059834123222748, 18.442021276595746, 38.617090592334492, 36.913010301411674]
#plt.plot(Flow_Size, SlowDown, '-.', color='brown', label='HPCC+SFQ')

SlowDown = [3.4244465738423027, 3.5284722222222222, 3.7558277027027027, 4.2114718614718614, 8.2120098039215694, 14.97517523364486, 13.071036216085272]
plt.plot(Flow_Size, SlowDown, '--', color='orange', label='DCTCP')

ax = plt.axes()
ax.get_yaxis().set_ticks([1,2,4,8,16,32,64], minor=True)
ax.get_yaxis().set_ticks([], minor=False)
ax.yaxis.set_minor_formatter(mticker.ScalarFormatter())
ax.yaxis.get_minor_formatter().set_scientific(False)
ax.yaxis.set_major_formatter(mticker.ScalarFormatter())
ax.yaxis.get_major_formatter().set_scientific(False)
for tick in ax.yaxis.get_major_ticks():
	tick.label.set_fontsize(14)
for tick in ax.yaxis.get_minor_ticks():
	tick.label.set_fontsize(14)
for tick in ax.xaxis.get_major_ticks():
	tick.label.set_fontsize(14)
plt.legend(bbox_to_anchor=(-0.1, 1.02, 1.1, 1.02), loc=3, ncol=2, mode="expand", borderaxespad=0., prop={'size': 15}, frameon=False)
plt.tight_layout()

plt.figure(figsize=(4,3))
plt.ylabel("FCT Slow Down", fontsize=17)
plt.xlabel("Flow Size (KB)", fontsize=17)
plt.xscale('log')
plt.yscale('log')
plt.gca().set_ylim(bottom=1)

Flow_Size = [3,12,48,192,768,3072,12288]
SlowDown = [2.2363346747149566, 2.6521396396396395, 4.8018581081081084, 6.9927763819095476, 9.981457703927493, 10.678372681281619, 9.7158230076034915]
plt.plot(Flow_Size, SlowDown, '-', color='blue', label='BFC')

SlowDown = [37.339306872037916, 44.950000000000003, 24.021232876712329, 23.926445578231291, 32.546551724137935, 41.574526515151518, 35.05040255796834]
plt.plot(Flow_Size, SlowDown, '--', color='red', label='HPCC+InfBuf')

SlowDown = [65.612663670119218, 62.340771028037381, 48.514212328767123, 43.872933070866139, 54.530007530120479, 53.76351893095768, 44.550896421706341]
plt.plot(Flow_Size, SlowDown,  '-.', color='green', label='HPCC+PFC')

SlowDown = [36.847081243335047, 45.123967889908258, 24.057619863013699, 24.06639344262295, 35.409131355932203, 42.810354573484069, 35.726523323615162]
plt.plot(Flow_Size, SlowDown, ':', color='black', label='HPCC+Retr.')
ax = plt.axes()
ax.get_yaxis().set_ticks([1,2,4,8,16,32,64,128], minor=True)
ax.get_yaxis().set_ticks([], minor=False)
ax.yaxis.set_minor_formatter(mticker.ScalarFormatter())
ax.yaxis.get_minor_formatter().set_scientific(False)
ax.yaxis.set_major_formatter(mticker.ScalarFormatter())
ax.yaxis.get_major_formatter().set_scientific(False)
for tick in ax.yaxis.get_major_ticks():
	tick.label.set_fontsize(14)
for tick in ax.yaxis.get_minor_ticks():
	tick.label.set_fontsize(14)
for tick in ax.xaxis.get_major_ticks():
	tick.label.set_fontsize(14)
plt.legend(bbox_to_anchor=(-0.22, 1.02, 1.24, 1.02), loc=3, ncol=2, mode="expand", borderaxespad=0., prop={'size': 15}, frameon=False)
plt.tight_layout()

plt.show()